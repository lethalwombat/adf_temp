{
	"name": "MDF_SCD1_Update_VW",
	"properties": {
		"description": "Execute a merge (update), to the target directory, based on the provided parameters.",
		"folder": {
			"name": "SCD/1/Update"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_synapsesqlondemand_gen01",
						"type": "LinkedServiceReference"
					},
					"name": "synSslSrcQry"
				},
				{
					"linkedService": {
						"referenceName": "ls_synapsesqlondemand_gen01",
						"type": "LinkedServiceReference"
					},
					"name": "synSqlCur"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_azdatalake",
						"type": "LinkedServiceReference"
					},
					"name": "sinkDelta"
				}
			],
			"transformations": [
				{
					"name": "derivedColumns"
				},
				{
					"name": "surrogateKey"
				},
				{
					"name": "CheckBKExists"
				},
				{
					"name": "getMaxSK"
				},
				{
					"name": "SeedNewSKs"
				},
				{
					"name": "UpdateSK"
				},
				{
					"name": "DropUnwanted"
				},
				{
					"name": "derivedColumnCur"
				},
				{
					"name": "TagInsert"
				},
				{
					"name": "TagUpdate"
				},
				{
					"name": "CheckBKUpdates"
				},
				{
					"name": "UnionInsertupdate"
				},
				{
					"name": "lookupSK"
				},
				{
					"name": "Keys"
				},
				{
					"name": "RemoveExtraRowsig"
				}
			],
			"scriptLines": [
				"parameters{",
				"     sourceName as string ('vw_empty_hash'),",
				"     sourceSchema as string ('dbo'),",
				"     targetName as string ('empty'),",
				"     targetSchema as string ('fnd_rel')",
				"}",
				"source(output(",
				"          rowSig as binary,",
				"          rowHash as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'synapseanalytics',",
				"     schemaName: ($sourceSchema),",
				"     tableName: ($sourceName),",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     staged: false) ~> synSslSrcQry",
				"source(output(",
				"          rowSig as binary,",
				"          rowHash as binary,",
				"          SK as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'synapseanalytics',",
				"     schemaName: ($sourceSchema),",
				"     tableName: ($sourceName),",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     staged: false) ~> synSqlCur",
				"synSslSrcQry derive(rowUUID = uuid(),",
				"          lastUpdateDate = currentTimestamp()) ~> derivedColumns",
				"CheckBKExists keyGenerate(output(SK as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey",
				"derivedColumns, synSqlCur exists(equals(synSslSrcQry@rowSig, synSqlCur@rowSig),",
				"     negate:true,",
				"     broadcast: 'auto')~> CheckBKExists",
				"synSqlCur aggregate(maxSK = max(toInteger(byName('SK')))) ~> getMaxSK",
				"surrogateKey, getMaxSK join(maxSK==SK||true(),",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> SeedNewSKs",
				"SeedNewSKs derive(SK = maxSK+SK) ~> UpdateSK",
				"UpdateSK select(mapColumn(",
				"          each(match(!in(['MaxSK'],name)))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropUnwanted",
				"synSqlCur derive(rowUUID = uuid(),",
				"          lastUpdateDate = currentTimestamp()) ~> derivedColumnCur",
				"DropUnwanted alterRow(insertIf(true())) ~> TagInsert",
				"RemoveExtraRowsig alterRow(updateIf(true())) ~> TagUpdate",
				"derivedColumns, synSqlCur exists(equals(synSslSrcQry@rowSig, synSqlCur@rowSig) && not(equals(synSslSrcQry@rowHash, synSqlCur@rowHash)),",
				"     negate:false,",
				"     broadcast: 'auto')~> CheckBKUpdates",
				"TagInsert, TagUpdate union(byName: true)~> UnionInsertupdate",
				"CheckBKUpdates, Keys lookup(toString(synSslSrcQry@rowSig) == toString(Keys@rowSig),",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupSK",
				"derivedColumnCur select(mapColumn(",
				"          rowSig,",
				"          SK",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Keys",
				"lookupSK select(mapColumn(",
				"          each(match(!in(['keys@rowSig'],name)))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveExtraRowsig",
				"UnionInsertupdate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ATSIID as string,",
				"          ATSI as string,",
				"          ATSIGroup as string,",
				"          ATSIGroupUnknown as string,",
				"          AlternativeATSI as string,",
				"          IndigenousID as string,",
				"          ValeoATSIID as string,",
				"          EYSATSIID as string,",
				"          NAPLANATSIID as integer,",
				"          PATATSIID as string,",
				"          BPATHATSIID as string,",
				"          Ordinal as integer,",
				"          Boolean as boolean,",
				"          rowSig as binary,",
				"          rowHash as binary,",
				"          rowUUID as string,",
				"          lastUpdateDate as timestamp,",
				"          SK as long",
				"     ),",
				"     format: 'delta',",
				"     compressionType: 'snappy',",
				"     compressionLevel: 'Fastest',",
				"     fileSystem: 'transformed',",
				"     folderPath: (concat('Delta/',$targetSchema,'/',$targetName)),",
				"     mergeSchema: false,",
				"     autoCompact: true,",
				"     optimizedWrite: true,",
				"     vacuum: 0,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['SK'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkDelta"
			]
		}
	}
}